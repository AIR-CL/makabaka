<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

<!--    扫描根包,将注解类给spring容器管理-->
    <context:component-scan base-package="fhq.mapper"/>
    <context:component-scan base-package="fhq.controller"/>
    <context:component-scan base-package="fhq.service"/>

    <!-- 加载jdbc.properties文件
        location指定属性文件的位置
    -->
    <context:property-placeholder
            location="classpath:db.properties"/>

    <!-- 配置druid，作为数据源
        id是固定值
        class是阿里对象的全路径
    -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">

        <!-- 给对象的属性设置值 spring表达式${}取值-->
        <property name="username" value="${db.username}"></property>
        <property name="password" value="${db.password}"></property>
        <property name="driverClassName" value="${db.driver}"></property>
        <property name="url" value="${db.url}"></property>
        <property name="initialSize" value="${db.initSize}"></property>
        <property name="maxActive" value="${db.activeSize}"></property>
    </bean>

    <!-- 整合spring和MyBatis框架 -->
    <!-- 配置SessionFactory -->
    <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 配置别名 默认别名就是类的类名-->
        <property name="typeAliasesPackage" value="fhq.pojo"></property>
        <!--指定 mapper 的sql映射文件 -->
        <property name="mapperLocations" value="classpath:mappers/*.xml" />
        <!--加载mybatis配置文件 开启驼峰映射-->
        <property name="configLocation" value="classpath:mybatis/mybatis.xml"></property>
    </bean>
    <!-- 扫描mapper配置文件的地址 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        扫描mapper包下面的接口,框架会自动生成接口的代理实现类-->
        <property name="basePackage" value="fhq.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    <!-- 配置Spring的事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

</beans>
